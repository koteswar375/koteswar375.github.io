{"version":3,"sources":["assets/profile.png","Components/Header/Header.js","Components/Intro/Intro.js","Components/AboutMe/AboutMe.js","Components/Content/Articles/Articles.js","Components/Content/Projects/Projects.js","Components/Content/Skills/Skills.js","Components/Content/Timeline/TimeLine.js","Components/Content/Content.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Header","props","className","Intro","alt","height","width","src","profilePic","AboutMe","Articles","articles","map","article","key","id","title","Projects","Repos","repos","repo","name","Skills","TimeLine","Content","state","FetchMediumArticles","axios","get","FetchDevArticles","GetGithubRepos","Promise","all","this","then","res","mediumArticles","data","items","item","i","link","pubDate","thumbnail","devArticles","url","published_at","social_image","githubRepos","html_url","updated_at","setState","to","exact","path","component","render","Component","App","Boolean","window","location","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.44ebd7ee.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/profile.5eb6d85a.png\";","import React from 'react';\r\nimport './Header.css';\r\n\r\nconst Header = (props) => {\r\n\r\n\r\n    return (\r\n        <div className=\"header cyan  white-text\">\r\n                <span className=\"title\">KOTESWAR RAO MEESALA</span>\r\n                <div className=\"header-items\">\r\n                    <span className=\"headerItem\">Contact</span>\r\n                    <span className=\"headerItem\">Resume</span>\r\n                </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Header;","import React from 'react';\r\nimport './Intro.css';\r\nimport profilePic from '../../assets/profile.png';\r\nconst Intro = (props) => {\r\n\r\n\r\n    return (\r\n        <div className=\"intro\">\r\n            <div className=\"profile-pic\">\r\n                <img alt=\"Profile\" height=\"150\" width=\"150\" src={profilePic}/>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nexport default Intro;","import React from 'react';\r\nimport './AboutMe.css';\r\n\r\nconst AboutMe = (props) => {\r\n\r\n\r\n    return (\r\n        <div className=\"aboutme\">\r\n            <div className=\"aboutme-section\">\r\n                <h2>About Me</h2>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default AboutMe;","import React from 'react';\r\n\r\n\r\nconst Articles = (props) => {\r\n\r\n    const articles = props.articles;\r\n    return (\r\n        <div>\r\n            {articles ? articles.map(article => {\r\n            return (\r\n            <div className=\"container\" key={article.id}>\r\n                <div className=\"card-panel\">\r\n                    <span className=\"blue-text text-darken-2\">{article.title}</span>\r\n                </div>\r\n            </div>\r\n            )}\r\n            ) : (\r\n                    <div>No articles to display</div>\r\n                )\r\n            }\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default Articles;","import React from 'react';\r\n\r\nconst Projects = (props) => {\r\n\r\n    const Repos = props.repos.map(repo => {\r\n        return (\r\n            <div className=\"card-panel\">\r\n                <span className=\"blue-text text-darken-2\">{repo.name}</span>\r\n            </div>\r\n        )\r\n    });\r\n    return (\r\n        <div className=\"container\">\r\n            {Repos}\r\n        </div >\r\n    )\r\n};\r\n\r\nexport default Projects;","import React from 'react';\r\n\r\n\r\nconst Skills = (props) => {\r\n\r\n    return (\r\n        <div className = \"container\">\r\n            <div className=\"card-panel\">\r\n                <span className=\"blue-text text-darken-2\">Skills</span>\r\n            </div>\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default Skills;","import React from 'react';\r\n\r\nconst TimeLine = (props) => {\r\n\r\n    return (\r\n        <div className = \"container\">\r\n            <div className=\"card-panel\">\r\n                <span className=\"blue-text text-darken-2\">TimeLine</span>\r\n            </div>\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default TimeLine;","import React, {Component} from 'react';\r\nimport { Link, Switch, Route } from 'react-router-dom';\r\nimport axios from 'axios';\r\nimport './Content.css';\r\nimport Articles from './Articles/Articles';\r\nimport Projects from './Projects/Projects';\r\nimport Skills from './Skills/Skills';\r\nimport TimeLine from './Timeline/TimeLine';\r\n\r\nclass Content extends Component {\r\n    state = {\r\n        articles : [],\r\n        repos: []\r\n    }\r\n    FetchMediumArticles = () => axios.get('https://api.rss2json.com/v1/api.json?rss_url=https://medium.com/feed/@koteswar.meesala');\r\n    FetchDevArticles = () => axios.get('https://dev.to/api/articles?username=koteswar375');\r\n    GetGithubRepos = () => axios.get('https://api.github.com/users/koteswar375/repos');\r\n    componentDidMount () {\r\n        Promise.all([this.FetchMediumArticles(),this.FetchDevArticles(), this.GetGithubRepos()])\r\n        .then(res => {\r\n            const mediumArticles = res[0].data.items.map((item,i)=> {\r\n                const {link, pubDate, thumbnail, title} = item;\r\n                return {link, pubDate, thumbnail, title, id:i+1}\r\n            });\r\n            const devArticles = res[1].data.map((item,i)=> {\r\n                const {url, published_at, social_image, title, id} = item;\r\n                return {link:url, pubDate:published_at, thumbnail:social_image, title, id}\r\n            });\r\n            const githubRepos = res[2].data.map((item,i)=> {\r\n                const {html_url, updated_at, name, id} = item;\r\n                return {url:html_url, updated_at, name, id}\r\n            });;\r\n            this.setState({articles:[...mediumArticles, ...devArticles], repos: githubRepos});\r\n        })\r\n    }\r\n\r\n    render() {\r\n    return (\r\n        <div>\r\n            <div className=\"list-items\">\r\n                <li><Link to=\"/\">TIMELINE</Link></li>\r\n                <li><Link to=\"/articles\">ARTICLES</Link></li>\r\n                <li><Link to=\"/projects\">GITHUB</Link></li>\r\n                <li><Link to=\"/skills\">SKILLS</Link></li>\r\n            </div>\r\n            <div className=\"list-item-content\">\r\n                <Switch>\r\n                    <Route exact path=\"/\" component={TimeLine}></Route>\r\n                    <Route exact path=\"/articles\" render={(props) => <Articles {...props} articles={this.state.articles}/>}></Route>\r\n                    <Route exact path=\"/projects\" render={(props) => <Projects {...props} repos={this.state.repos}/>}></Route>\r\n                    <Route exact path=\"/skills\" component={Skills}></Route>\r\n                </Switch>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n}\r\n\r\n\r\nexport default Content;","import React from 'react';\r\nimport './App.css';\r\nimport Header from './Components/Header/Header';\r\nimport Intro from './Components/Intro/Intro';\r\nimport AboutMe from './Components/AboutMe/AboutMe';\r\nimport Content from './Components/Content/Content';\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n        <Header></Header>\r\n        <Intro></Intro>\r\n        <AboutMe></AboutMe>\r\n        <Content></Content>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport 'materialize-css/dist/css/materialize.min.css';\r\nimport {BrowserRouter} from 'react-router-dom';\r\n\r\nReactDOM.render(\r\n  <BrowserRouter>\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>\r\n  </BrowserRouter>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}